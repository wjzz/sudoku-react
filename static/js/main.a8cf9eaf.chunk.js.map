{"version":3,"sources":["components/Header.tsx","components/Banner.tsx","components/Cell.tsx","components/Square.tsx","components/Board.tsx","components/BoardPanel.tsx","Types.ts","Sudoku.ts","components/BoardContainer.tsx","Utils.ts","components/Game.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","react_default","a","createElement","Banner","props","validation","id","onClick","handleReset","handleRandomize","handleInitial","className","concat","Cell","value","clickHandler","idx","prettyValue","class_name","current","onMouseDown","Square","row","col","puzzle","currentIndex","cells","i","j","cell_row","cell_col","isCurrent","push","components_Cell","key","handleCellClick","Board","squares","components_Square","BoardPanel","_props$calculation","calculation","calculationStarted","indexesDone","indexesTodo","calculation_info","puzzleSolved","length","handleCalculate","all_digits","validateSudoku","next_col","next_row","square_base_row","Math","floor","square_base_col","dx","dy","BoardContainer","components_Board","components_BoardPanel","every","randCellDigit","min","max","console","assert","random","initialCalculation","Game","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setState","generateRandomPuzzle","n","state","slice","newValue","nextCandidate","_this$state$calculati","assign","_this$processNextCell","processNextCell","candidates","markCellAsSolved","window","setTimeout","log","indexes","newIndexesTodo","pop","_ref","results","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","digit","err","return","findCandidates","toConsumableArray","components_Banner","components_BoardContainer","Component","App","components_Header","components_Game","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a8cf9eaf.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../App.css\";\r\n\r\nconst Header : React.FC = () => {\r\n    return (\r\n        <header>\r\n            Example Sudoku Solver in React\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"../App.css\";\r\n\r\ninterface Props {\r\n    handleReset(): void;\r\n    handleRandomize(): void;\r\n    handleInitial(n: number): () => void;\r\n    validation: boolean;\r\n}\r\n\r\nconst Banner : React.FC<Props> = (props: Props) => {\r\n    const validation = props.validation ? \"valid\" : \"invalid\";\r\n    return (\r\n        <div id=\"banner\">\r\n            <button onClick={props.handleReset}>Reset</button>\r\n            <button onClick={props.handleRandomize}>Randomize</button>\r\n            <button onClick={props.handleInitial(1)}>Initial game 1</button>\r\n            <button onClick={props.handleInitial(2)}>Initial game 2</button>\r\n            <br />\r\n            Position status: <span id=\"validation\" className={`validation ${validation}`}>{validation}</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Banner;","import React from \"react\";\r\nimport \"../App.css\";\r\nimport { CellContent, CellIndex } from \"../Types\";\r\n\r\ninterface CellProps {\r\n    idx: CellIndex;\r\n    value: CellContent;\r\n    current: boolean;\r\n    clickHandler(idx: CellIndex): void;\r\n}\r\n\r\nconst Cell = (props: CellProps) => {\r\n    const {value, clickHandler, idx} = props;\r\n\r\n    const prettyValue = value != null ? value : \"-\";\r\n    const class_name = props.current ? \"cell current-index\" : \"cell\";\r\n    return (\r\n        <div className={class_name} onMouseDown={() => clickHandler(idx)}>\r\n            <span className=\"cell-digit\">{prettyValue}</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cell;","import React from \"react\";\r\nimport Cell from \"./Cell\";\r\nimport \"../App.css\";\r\nimport { CellIndex, Puzzle } from \"../Types\";\r\n\r\ninterface Props {\r\n    row: number;\r\n    col: number;\r\n    puzzle: Puzzle;\r\n    currentIndex: CellIndex | null;\r\n    handleCellClick(idx: CellIndex): void;\r\n}\r\n\r\nconst Square : React.FC<Props> = (props: Props) => {\r\n    const {row, col, puzzle, currentIndex} = props;\r\n\r\n    const cells = [];\r\n    for (let i = 0; i < 3; ++i){\r\n        for (let j = 0; j < 3; ++j){\r\n            const cell_row = 3*row + i;\r\n            const cell_col = 3*col + j;\r\n            const value = puzzle[cell_row][cell_col];\r\n            const idx = {row: cell_row, col: cell_col};\r\n\r\n            let isCurrent = false;\r\n            if (currentIndex &&\r\n                currentIndex.row === cell_row &&\r\n                currentIndex.col === cell_col){\r\n                    isCurrent = true;\r\n            }\r\n            cells.push(<Cell \r\n                current = {isCurrent}\r\n                idx = {idx}\r\n                value = {value}\r\n                key = {`${cell_row}${cell_col}`}\r\n                clickHandler = {props.handleCellClick}\r\n            />);\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"square\" key={`${row}${col}`}>\r\n            {cells}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Square;","import React from \"react\";\r\nimport Square from \"./Square\";\r\nimport \"../App.css\";\r\nimport { CellIndex, Puzzle} from \"../Types\";\r\n\r\ninterface Props {\r\n    readonly puzzle: Puzzle;\r\n    readonly currentIndex: CellIndex | null;\r\n    handleCellClick(idx: CellIndex): void;\r\n};\r\n\r\nconst Board: React.FC<Props> = (props: Props) => {\r\n    const squares : JSX.Element[] = [];\r\n\r\n    for (let row = 0; row < 3; ++row){\r\n        for (let col = 0; col < 3; ++col){\r\n            squares.push(<Square \r\n                row={row}\r\n                col={col}\r\n                puzzle={props.puzzle}\r\n                currentIndex={props.currentIndex}\r\n                handleCellClick={props.handleCellClick}\r\n            />);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div id=\"board\">\r\n            { squares }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Board;","import React from \"react\";\r\nimport \"../App.css\";\r\nimport { CalculationState } from \"../Types\";\r\n\r\ninterface Props {\r\n    handleCalculate(): void;\r\n    readonly puzzleSolved: boolean;\r\n    readonly calculation: CalculationState;\r\n}\r\n\r\nconst BoardPanel : React.FC<Props> = (props: Props) => {\r\n\r\n    const {calculationStarted, indexesDone, indexesTodo} = props.calculation;\r\n    const calculation_info = \r\n        props.puzzleSolved ? \r\n        \"Puzzle solved!\" :\r\n        (calculationStarted ? \r\n        <div>\r\n            Calculation started <br />\r\n            {indexesTodo.length} todo. <br />\r\n            {indexesDone.length} done. <br />\r\n        </div>\r\n        : \r\n        \"No started calculations\");\r\n\r\n    return (\r\n        <div id=\"panel\">\r\n            Additional information: <br/><br/>\r\n            <button onClick={props.handleCalculate}>\r\n                Calculate canditates\r\n            </button> <br/><br/>\r\n            {calculation_info}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BoardPanel;","export type CellDigit = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9\r\n\r\nexport const all_digits : CellDigit[] = [1,2,3,4,5,6,7,8,9];\r\n\r\nexport type CellContent = CellDigit | null;\r\n\r\nexport type Puzzle = CellContent[][];\r\n\r\nexport interface CellIndex {\r\n    row: number;\r\n    col: number;\r\n}\r\n\r\nexport interface CalculationState {\r\n    readonly currentIndex: CellIndex | null;\r\n    readonly calculationStarted: boolean;\r\n    readonly indexesDone: CellIndex[];\r\n    readonly indexesTodo: CellIndex[];\r\n}\r\n","import { Puzzle, CellIndex, CellDigit, all_digits } from \"./Types\";\r\n\r\n// Two example easy puzzles taken from\r\n// Webservice with sudoku JSON API\r\n// \"http://www.cs.utep.edu/cheon/ws/sudoku/\";\r\n\r\nexport function examplePuzzle() : Puzzle {\r\n    return [\r\n        [null, null, null, 2, 6, null, 7, null, 1,],\r\n        [6, 8, null, null, 7, null, null, 9, null,],\r\n        [1, 9, null, null, null, 4, 5, null, null,],\r\n        [8, 2, null, 1, null, null, null, 4, null,],\r\n        [null, null, 4, 6, null, 2, 9, null, null,],\r\n        [null, 5, null, null, null, 3, null, 2, 8,],\r\n        [null, null, 9, 3, null, null, null, 7, 4,],\r\n        [null, 4, null, null, 5, null, null, 3, 6,],\r\n        [7, null, 3, null, 1, 8, null, null, null,],\r\n    ];\r\n}\r\n\r\nexport function examplePuzzle2() : Puzzle {\r\n    return [\r\n        [1, null, null, 4,8,9, null, null, 6],\r\n        [7,3,null,null,null,null,null,4,null,],\r\n        [null,null,null,null,null,1,2,9,5],\r\n        [null,null,7,1,2,null,6,null,null,],\r\n        [5,null,null,7,null,3,null,null,8,],\r\n        [null,null,6,null,9,5,7,null,null,],\r\n        [9,1,4,6,null,null,null,null,null,],\r\n        [null,2,null,null,null,null,null,3,7,],\r\n        [8,null,null,5,1,2,null,null,4],\r\n    ];\r\n}\r\n\r\n/// Checks if the given puzzle is solved\r\nexport function isPuzzleSolved(puzzle: Readonly<Puzzle>): boolean {\r\n    const no_nulls = puzzle.every( row =>\r\n        row.every (value => \r\n            value !== null));\r\n    return no_nulls && validateSudoku(puzzle);\r\n}\r\n\r\n/// Checks if the given (perhaps partially solved) puzzle contains\r\n/// no contradictions, ie. all the sudoku conditions are OK\r\nexport function validateSudoku (puzzle: Readonly<Puzzle>) : boolean {\r\n    for (let row = 0; row < 9; ++row){\r\n        for (let col = 0; col < 9; ++col){\r\n            const current = puzzle[row][col];\r\n            if (current !== null){\r\n                // check row\r\n                for (let next_col = col+1; next_col < 9; next_col++){\r\n                    if (puzzle[row][next_col] === current) {\r\n                        return false;\r\n                    }\r\n                }\r\n                // check col\r\n                for (let next_row = row+1; next_row < 9; ++next_row){\r\n                    if (puzzle[next_row][col] === current){\r\n                        return false;\r\n                    }\r\n                }\r\n                // check the 3x3 square containing the current cell\r\n                const square_base_row = Math.floor(row/3);\r\n                const square_base_col = Math.floor(col/3);\r\n                for (let dx = 0; dx < 3; ++dx){\r\n                    for (let dy = 0; dy < 3; ++dy){\r\n                        const next_row = 3*square_base_row + dy;\r\n                        const next_col = 3*square_base_col + dx;\r\n                        if (((row !== next_row) || (col !== next_col)) \r\n                           && puzzle[next_row][next_col] === current){\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n// Calculates all possible digits that fit in the {row, col} position\r\n// of the given puzzle.\r\n// Precondition: puzzle[row][col] === null\r\nexport function findCandidates(puzzle: Puzzle, {row, col}: CellIndex): CellDigit[] {\r\n    const results : CellDigit[] = [];\r\n\r\n    console.assert(puzzle[row][col] === null);\r\n\r\n    for (let digit of all_digits){\r\n        puzzle[row][col] = digit;\r\n        if (validateSudoku(puzzle)){\r\n            results.push(digit);\r\n        }\r\n        puzzle[row][col] = null;\r\n    } \r\n    return results;\r\n}","import React from \"react\";\r\nimport Board from \"./Board\";\r\nimport BoardPanel from \"./BoardPanel\";\r\nimport \"../App.css\";\r\nimport { CellIndex, Puzzle, CalculationState } from \"../Types\";\r\nimport { isPuzzleSolved } from \"../Sudoku\";\r\n\r\ninterface Props {\r\n    readonly puzzle: Puzzle;\r\n    handleCellClick(idx: CellIndex): void;\r\n    handleCalculate(): void;\r\n    readonly calculation: CalculationState;\r\n};\r\n\r\nconst BoardContainer: React.FC<Props> = (props: Props) => {\r\n    return (\r\n        <div id=\"board-container\">\r\n            <Board\r\n                puzzle={props.puzzle}\r\n                currentIndex={props.calculation.currentIndex}\r\n                handleCellClick={props.handleCellClick}\r\n            />\r\n            <BoardPanel \r\n                handleCalculate={props.handleCalculate}\r\n                calculation={props.calculation}\r\n                puzzleSolved={isPuzzleSolved(props.puzzle)}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BoardContainer;","import { CellDigit, Puzzle } from \"./Types\";\r\n\r\n/// Some helper functions\r\n\r\n/// Returns a random integer in the [min, max] interval\r\nfunction randInt(min: number, max: number) : number {\r\n    console.assert (min < max);\r\n    console.assert (0 <= min);\r\n    console.assert (1 <= max);\r\n    // Proof of correctness\r\n    // let m = Math.random()\r\n    // then 0 <= m < 1\r\n    // then 0 <= (max-min+1)*m < max-min+1\r\n    // min <= min+(max-min+1)*m < max+1\r\n    // Math.floor(min+(max-min+1)m) in [min, max]\r\n    return Math.floor(min + (max-min+1) * Math.random());\r\n}\r\n\r\nfunction randCellDigit(): CellDigit {\r\n    return randInt(1, 9) as CellDigit;\r\n}\r\n\r\n// TODO: add unit tests for randInt and randCellDigit\r\n\r\nexport function generateRandomPuzzle(): Puzzle {\r\n    const puzzle : Puzzle = [];\r\n    for (let row = 0; row < 9; ++row){\r\n        puzzle[row] = [];\r\n        for (let col = 0; col < 9; ++col){\r\n            puzzle[row][col] = randCellDigit();\r\n        }\r\n    }\r\n    return puzzle;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Banner from \"./Banner\";\r\nimport BoardContainer from \"./BoardContainer\";\r\n\r\nimport \"../App.css\";\r\n\r\nimport { CellContent, CellIndex, Puzzle, CellDigit, CalculationState } from \"../Types\";\r\nimport { generateRandomPuzzle } from \"../Utils\";\r\nimport { examplePuzzle, examplePuzzle2, validateSudoku, findCandidates } from \"../Sudoku\";\r\n\r\ninterface Props {}\r\n\r\ninterface State {\r\n    readonly puzzle: Puzzle;\r\n    readonly calculation: CalculationState;\r\n}\r\n\r\nconst initialCalculation : CalculationState = {\r\n    calculationStarted: false,\r\n    currentIndex: null,\r\n    indexesDone: [],\r\n    indexesTodo: [],\r\n}\r\n\r\nclass Game extends Component<Props, State>{\r\n    constructor(props: Props){\r\n        super(props);\r\n\r\n        const puzzle: Puzzle = examplePuzzle();\r\n        this.state = { puzzle, calculation: initialCalculation };\r\n    }\r\n\r\n    handleReset = () => {\r\n        this.setState({puzzle: examplePuzzle(), calculation: initialCalculation});\r\n    }\r\n\r\n    handleRandomize = () => {\r\n        const puzzle = generateRandomPuzzle();\r\n        this.setState({puzzle, calculation: initialCalculation});\r\n    }\r\n\r\n    handleInitial = (n: number) => () => {\r\n        let puzzle = (n === 1) ? examplePuzzle() : examplePuzzle2();\r\n        this.setState({puzzle, calculation: initialCalculation});\r\n    }\r\n\r\n    handleCellClick = (idx: CellIndex) => {\r\n        const {row, col} = idx;\r\n        const puzzle = this.state.puzzle.slice();\r\n        const value = puzzle[row][col];\r\n        const newValue = (!value || value === 9) ? 1 : value + 1;\r\n        puzzle[row][col] = newValue as CellContent;\r\n        this.setState({puzzle});\r\n    }\r\n\r\n    private processNextCell(indexesTodo: CellIndex[], indexesDone: CellIndex[]) {\r\n        // start state update\r\n        const newIndexesTodo = indexesTodo.slice();\r\n        const currentIndex = newIndexesTodo.pop() as CellIndex;\r\n\r\n        // do the actual calculation\r\n        const candidates = findCandidates(this.state.puzzle, currentIndex);\r\n\r\n        // finish state update\r\n        const newIndexesDone = [...indexesDone, currentIndex];\r\n        const calculation = {\r\n            calculationStarted: true,\r\n            currentIndex,\r\n            indexesTodo: newIndexesTodo,\r\n            indexesDone: newIndexesDone,\r\n        };\r\n        this.setState({ calculation });\r\n\r\n        return { candidates, currentIndex };\r\n    }\r\n\r\n    private markCellAsSolved(currentIndex: CellIndex, candidates: CellDigit[]) {\r\n        const puzzle = this.state.puzzle.slice();\r\n        const { row, col } = currentIndex;\r\n        puzzle[row][col] = candidates[0];\r\n        this.setState({ puzzle });\r\n    }\r\n\r\n    nextCandidate = () => {\r\n        const {calculationStarted, indexesDone, indexesTodo} = this.state.calculation;\r\n        if (calculationStarted){\r\n            if (indexesTodo.length === 0){\r\n                const calculation = Object.assign({}, this.state.calculation, {calculationStarted: false});\r\n                this.setState({calculation});\r\n            } else {\r\n                const { candidates, currentIndex } = this.processNextCell(indexesTodo, indexesDone);               \r\n\r\n                if (candidates.length > 0){\r\n                    if (candidates.length === 1){\r\n                        this.markCellAsSolved(currentIndex, candidates);\r\n                    }\r\n                    window.setTimeout(this.nextCandidate, 100);\r\n                } else {\r\n                    console.log(\"PROBLEM: no possible solutions!!\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    handleCalculate = () => {\r\n        const puzzle = this.state.puzzle;\r\n        let indexes : CellIndex[] = [];\r\n        for (let row = 0; row < 9; ++row){\r\n            for (let col = 0; col < 9; ++col){\r\n                if (puzzle[row][col] === null){\r\n                    indexes.push({row, col});\r\n                }\r\n            }\r\n        }\r\n\r\n        const calculation = {\r\n            calculationStarted: true, \r\n            indexesTodo: indexes,\r\n            indexesDone: [], \r\n            currentIndex: null};\r\n        this.setState({calculation});\r\n        window.setTimeout(this.nextCandidate, 100);\r\n    }\r\n\r\n\r\n    render(){\r\n        return (\r\n            <div id=\"game\">\r\n                <Banner \r\n                    handleReset={this.handleReset}\r\n                    handleRandomize={this.handleRandomize}\r\n                    handleInitial={this.handleInitial}\r\n                    validation={validateSudoku(this.state.puzzle)}\r\n                />\r\n                <BoardContainer \r\n                    puzzle={this.state.puzzle} \r\n                    handleCellClick={idx => 1}\r\n                    //handleCellClick={this.handleCellClick} \r\n                    handleCalculate={this.handleCalculate}\r\n                    calculation={this.state.calculation}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Game;\r\n","import React from 'react';\nimport Header from \"./components/Header\";\nimport Game from \"./components/Game\";\nimport \"./App.css\";\n\nconst App: React.FC = () => {\n  return (\n    <div id=\"sudoku\">\n      <Header />\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}