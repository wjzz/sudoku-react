{"version":3,"sources":["components/Header.tsx","components/Banner.tsx","components/Cell.tsx","components/Board.tsx","Utils.ts","Types.ts","Sudoku.ts","components/Game.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","react_default","a","createElement","Banner","props","validation","id","onClick","handleReset","handleRandomize","handleInitial","className","concat","Cell","value","clickHandler","idx","prettyValue","class_name","current","onMouseDown","Board","squares","row","col","cells","i","j","cell_row","cell_col","values","isCurrent","calculation","currentIndex","_props$calculation$cu","curr_row","curr_col","push","components_Cell","key","handleCellClick","_props$calculation","calculationStarted","indexesDone","indexesTodo","calculation_info","length","handleCalculate","randCellDigit","min","max","console","assert","Math","floor","random","all_digits","validateSudoku","puzzle","next_col","next_row","square_base_row","square_base_col","dx","dy","initialCalculation","Game","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setState","generateRandomValues","n","state","slice","newValue","nextCandidate","_this$state$calculati","assign","calculatatioStarted","newIndexesTodo","pop","candidates","_ref","results","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","digit","err","return","findCandidates","toConsumableArray","log","window","setTimeout","indexes","components_Banner","components_Board","Component","App","components_Header","components_Game","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.055ee924.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../App.css\";\r\n\r\nconst Header : React.FC = () => {\r\n    return (\r\n        <header>\r\n            Example Sudoku Solver in React\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"../App.css\";\r\n\r\ninterface Props {\r\n    handleReset(): void;\r\n    handleRandomize(): void;\r\n    handleInitial(n: number): () => void;\r\n    validation: boolean;\r\n}\r\n\r\nconst Banner : React.FC<Props> = (props: Props) => {\r\n    const validation = props.validation ? \"valid\" : \"invalid\";\r\n    return (\r\n        <div id=\"banner\">\r\n            <button onClick={props.handleReset}>Reset</button>\r\n            <button onClick={props.handleRandomize}>Randomize</button>\r\n            <button onClick={props.handleInitial(1)}>Initial game 1</button>\r\n            <button onClick={props.handleInitial(2)}>Initial game 2</button>\r\n            <br />\r\n            Position status: <span id=\"validation\" className={`validation ${validation}`}>{validation}</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Banner;","import React from \"react\";\r\nimport \"../App.css\";\r\nimport { CellContent, CellIndex } from \"../Types\";\r\n\r\ninterface CellProps {\r\n    idx: CellIndex;\r\n    value: CellContent;\r\n    current: boolean;\r\n    clickHandler(idx: CellIndex): void;\r\n}\r\n\r\nconst Cell = (props: CellProps) => {\r\n    const {value, clickHandler, idx} = props;\r\n\r\n    const prettyValue = value != null ? value : \"-\";\r\n    const class_name = props.current ? \"cell current-index\" : \"cell\";\r\n    return (\r\n        <div className={class_name} onMouseDown={() => clickHandler(idx)}>\r\n            <span className=\"cell-digit\">{prettyValue}</span>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Cell;","import React from \"react\";\r\nimport Cell from \"./Cell\";\r\nimport \"../App.css\";\r\nimport { CellIndex, CellContent } from \"../Types\";\r\n\r\nexport interface CalculationState {\r\n    readonly currentIndex: CellIndex | null;\r\n    readonly calculationStarted: boolean;\r\n    readonly indexesDone: CellIndex[];\r\n    readonly indexesTodo: CellIndex[];\r\n}\r\n\r\ninterface Props {\r\n    readonly values: CellContent[][];\r\n    handleCellClick(idx: CellIndex): void;\r\n    handleCalculate(): void;\r\n    readonly calculation: CalculationState;\r\n};\r\n\r\nconst Board: React.FC<Props> = (props: Props) => {\r\n    const squares : JSX.Element[] = [];\r\n\r\n    for (let row = 0; row < 3; ++row){\r\n        for (let col = 0; col < 3; ++col){\r\n            const cells = [];\r\n            for (let i = 0; i < 3; ++i){\r\n                for (let j = 0; j < 3; ++j){\r\n                    const cell_row = 3*row + i;\r\n                    const cell_col = 3*col + j;\r\n                    const value = props.values[cell_row][cell_col];\r\n                    const idx = {row: cell_row, col: cell_col};\r\n                    let isCurrent = false;\r\n                    if (props.calculation.currentIndex){\r\n                        const {row: curr_row, col: curr_col} = props.calculation.currentIndex;\r\n                        if ((curr_row === cell_row) && (curr_col === cell_col)){\r\n                            isCurrent = true;\r\n                        }\r\n                    }\r\n                    cells.push(<Cell \r\n                        current = {isCurrent}\r\n                        idx = {idx}\r\n                        value = {value}\r\n                        key = {`${cell_row}${cell_col}`}\r\n                        clickHandler = {props.handleCellClick}\r\n                    />);\r\n                }\r\n            }\r\n            squares.push(<div className=\"square\" key={`${row}${col}`}>\r\n                {cells}\r\n            </div>);\r\n        }\r\n    }\r\n\r\n    const {calculationStarted, indexesDone, indexesTodo} = props.calculation;\r\n    const calculation_info = \r\n        calculationStarted ? \r\n        <div>\r\n            Calculation started <br />\r\n            {indexesTodo.length} todo. <br />\r\n            {indexesDone.length} done. <br />\r\n        </div>\r\n        : \r\n        \"No started calculations\";\r\n\r\n    return (\r\n        <div id=\"board-container\">\r\n            <div id=\"board\">\r\n                { squares }\r\n            </div>\r\n            <div id=\"panel\">\r\n                Additional information: <br/><br/>\r\n                <button onClick={props.handleCalculate}>\r\n                    Calculate canditates\r\n                </button> <br/><br/>\r\n                {calculation_info}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Board;","import { CellDigit } from \"./Types\";\r\n\r\n/// Some helper functions\r\n\r\n/// Returns a random integer in the [min, max]\r\n/// interval\r\nfunction randInt(min: number, max: number) : number {\r\n    console.assert (min < max);\r\n    console.assert (0 <= min);\r\n    console.assert (1 <= max);\r\n    // Proof of correctness\r\n    // let m = Math.random()\r\n    // then 0 <= m < 1\r\n    // then 0 <= (max-min+1)*m < max-min+1\r\n    // min <= min+(max-min+1)*m < max+1\r\n    // Math.floor(min+(max-min+1)m) in [min, max]\r\n    return Math.floor(min + (max-min+1) * Math.random());\r\n}\r\n\r\nfunction randCellDigit(): CellDigit {\r\n    return randInt(1, 9) as CellDigit;\r\n}\r\n\r\n// TODO: add unit tests for randInt and randCellDigit\r\n\r\nexport function generateRandomValues(): CellDigit[][] {\r\n    const values : CellDigit[][] = [];\r\n    for (let row = 0; row < 9; ++row){\r\n        values[row] = [];\r\n        for (let col = 0; col < 9; ++col){\r\n            values[row][col] = randCellDigit();\r\n        }\r\n    }\r\n    return values;\r\n}\r\n","export type CellDigit = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9\r\n\r\nexport const all_digits : CellDigit[] = [1,2,3,4,5,6,7,8,9];\r\n\r\nexport type CellContent = CellDigit | null;\r\n\r\nexport type Puzzle = CellContent[][];\r\n\r\nexport interface CellIndex {\r\n    row: number;\r\n    col: number;\r\n}","import { Puzzle, CellIndex, CellDigit, all_digits } from \"./Types\";\r\n\r\n// Two example easy puzzles taken from\r\n// Webservice with sudoku JSON API\r\n// \"http://www.cs.utep.edu/cheon/ws/sudoku/\";\r\n\r\nexport function examplePuzzle() : Puzzle {\r\n    return [\r\n        [null, null, null, 2, 6, null, 7, null, 1,],\r\n        [6, 8, null, null, 7, null, null, 9, null,],\r\n        [1, 9, null, null, null, 4, 5, null, null,],\r\n        [8, 2, null, 1, null, null, null, 4, null,],\r\n        [null, null, 4, 6, null, 2, 9, null, null,],\r\n        [null, 5, null, null, null, 3, null, 2, 8,],\r\n        [null, null, 9, 3, null, null, null, 7, 4,],\r\n        [null, 4, null, null, 5, null, null, 3, 6,],\r\n        [7, null, 3, null, 1, 8, null, null, null,],\r\n    ];\r\n}\r\n\r\nexport function examplePuzzle2() : Puzzle {\r\n    return [\r\n        [1, null, null, 4,8,9, null, null, 6],\r\n        [7,3,null,null,null,null,null,4,null,],\r\n        [null,null,null,null,null,1,2,9,5],\r\n        [null,null,7,1,2,null,6,null,null,],\r\n        [5,null,null,7,null,3,null,null,8,],\r\n        [null,null,6,null,9,5,7,null,null,],\r\n        [9,1,4,6,null,null,null,null,null,],\r\n        [null,2,null,null,null,null,null,3,7,],\r\n        [8,null,null,5,1,2,null,null,4],\r\n    ];\r\n}\r\n\r\n/// Checks if the given (perhaps partially solved) puzzle contains\r\n/// no contradictions, ie. all the sudoku conditions are OK\r\nexport function validateSudoku (puzzle: Readonly<Puzzle>) : boolean {\r\n    for (let row = 0; row < 9; ++row){\r\n        for (let col = 0; col < 9; ++col){\r\n            const current = puzzle[row][col];\r\n            if (current !== null){\r\n                // check row\r\n                for (let next_col = col+1; next_col < 9; next_col++){\r\n                    if (puzzle[row][next_col] === current) {\r\n                        return false;\r\n                    }\r\n                }\r\n                // check col\r\n                for (let next_row = row+1; next_row < 9; ++next_row){\r\n                    if (puzzle[next_row][col] === current){\r\n                        return false;\r\n                    }\r\n                }\r\n                // check the 3x3 square containing the current cell\r\n                const square_base_row = Math.floor(row/3);\r\n                const square_base_col = Math.floor(col/3);\r\n                for (let dx = 0; dx < 3; ++dx){\r\n                    for (let dy = 0; dy < 3; ++dy){\r\n                        const next_row = 3*square_base_row + dy;\r\n                        const next_col = 3*square_base_col + dx;\r\n                        if (((row !== next_row) || (col !== next_col)) \r\n                           && puzzle[next_row][next_col] === current){\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n// Calculates all possible digits that fit in the {row, col} position\r\n// of the given puzzle.\r\n// Precondition: puzzle[row][col] === null\r\nexport function findCandidates(puzzle: Puzzle, {row, col}: CellIndex): CellDigit[] {\r\n    const results : CellDigit[] = [];\r\n\r\n    console.assert(puzzle[row][col] === null);\r\n\r\n    for (let digit of all_digits){\r\n        puzzle[row][col] = digit;\r\n        if (validateSudoku(puzzle)){\r\n            results.push(digit);\r\n        }\r\n        puzzle[row][col] = null;\r\n    } \r\n    return results;\r\n}","import React, { Component } from \"react\";\r\nimport Banner from \"./Banner\";\r\nimport Board, { CalculationState } from \"./Board\";\r\n\r\nimport \"../App.css\";\r\n\r\nimport { CellContent, CellIndex, Puzzle } from \"../Types\";\r\nimport { generateRandomValues } from \"../Utils\";\r\nimport { examplePuzzle, examplePuzzle2, validateSudoku, findCandidates } from \"../Sudoku\";\r\n\r\ninterface Props {}\r\n\r\ninterface State {\r\n    readonly values: Puzzle;\r\n    readonly calculation: CalculationState;\r\n}\r\n\r\nconst initialCalculation : CalculationState = {\r\n    calculationStarted: false,\r\n    currentIndex: null,\r\n    indexesDone: [],\r\n    indexesTodo: [],\r\n}\r\n\r\nclass Game extends Component<Props, State>{\r\n    constructor(props: Props){\r\n        super(props);\r\n\r\n        const values: Puzzle = examplePuzzle();\r\n        this.state = { values, calculation: initialCalculation };\r\n    }\r\n\r\n    handleReset = () => {\r\n        this.setState({values: examplePuzzle(), calculation: initialCalculation});\r\n    }\r\n\r\n    handleRandomize = () => {\r\n        const values = generateRandomValues();\r\n        this.setState({values, calculation: initialCalculation});\r\n    }\r\n\r\n    handleInitial = (n: number) => () => {\r\n        let values = (n === 1) ? examplePuzzle() : examplePuzzle2();\r\n        this.setState({values, calculation: initialCalculation});\r\n    }\r\n\r\n    handleCellClick = (idx: CellIndex) => {\r\n        const {row, col} = idx;\r\n        const values = this.state.values.slice();\r\n        const value = values[row][col];\r\n        const newValue = (!value || value === 9) ? 1 : value + 1;\r\n        values[row][col] = newValue as CellContent;\r\n        this.setState({values});\r\n    }\r\n\r\n    nextCandidate = () => {\r\n        const {calculationStarted, indexesDone, indexesTodo} = this.state.calculation;\r\n        if (calculationStarted){\r\n            if (indexesTodo.length === 0){\r\n                const calculation = Object.assign({}, this.state.calculation, {calculatatioStarted: false});\r\n                this.setState({calculation});\r\n            } else {\r\n                // start state update\r\n                const newIndexesTodo = indexesTodo.slice();\r\n                const currentIndex = newIndexesTodo.pop() as CellIndex;\r\n\r\n                // do the actual calculation\r\n                const {row, col} = currentIndex;\r\n                const candidates = findCandidates(this.state.values, currentIndex);\r\n\r\n                // finish state update\r\n                const newIndexesDone = [...indexesDone, currentIndex];\r\n                const calculation = {\r\n                    calculationStarted: true,\r\n                    currentIndex,\r\n                    indexesTodo: newIndexesTodo,\r\n                    indexesDone: newIndexesDone,\r\n                };\r\n                this.setState({calculation});\r\n                if (candidates.length === 0){\r\n                    console.log(\"PROBLEM: no possible solutions!!\")\r\n                } else {\r\n                    if (candidates.length === 1){\r\n                        const values = this.state.values.slice();\r\n                        values[row][col] = candidates[0];\r\n                        this.setState({values});\r\n                    }\r\n                    window.setTimeout(this.nextCandidate, 100);\r\n                }                 \r\n            }\r\n        }\r\n    }\r\n\r\n    handleCalculate = () => {\r\n        const values = this.state.values;\r\n        let indexes : CellIndex[] = [];\r\n        for (let row = 0; row < 9; ++row){\r\n            for (let col = 0; col < 9; ++col){\r\n                if (values[row][col] === null){\r\n                    indexes.push({row, col});\r\n                }\r\n            }\r\n        }\r\n\r\n        const calculation = {\r\n            calculationStarted: true, \r\n            indexesTodo: indexes,\r\n            indexesDone: [], \r\n            currentIndex: null};\r\n        this.setState({calculation});\r\n        window.setTimeout(this.nextCandidate, 100);\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div id=\"game\">\r\n                <Banner \r\n                    handleReset={this.handleReset}\r\n                    handleRandomize={this.handleRandomize}\r\n                    handleInitial={this.handleInitial}\r\n                    validation={validateSudoku(this.state.values)}\r\n                />\r\n                <Board \r\n                    values={this.state.values} \r\n                    handleCellClick={idx => 1}\r\n                    handleCalculate={this.handleCalculate}\r\n                    calculation={this.state.calculation}\r\n                    //handleCellClick={this.handleCellClick} \r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Game;\r\n","import React from 'react';\nimport Header from \"./components/Header\";\nimport Game from \"./components/Game\";\nimport \"./App.css\";\n\nconst App: React.FC = () => {\n  return (\n    <div id=\"sudoku\">\n      <Header />\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}